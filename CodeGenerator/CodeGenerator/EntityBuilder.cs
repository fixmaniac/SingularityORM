using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CodeGenerator.Schema;

namespace CodeGenerator
{
    public class EntityBuilder
    {
        private readonly string version = "1.0";
        private readonly Entity entity;
        public StringBuilder sb;

        private IEnumerable<string> usings
        {
            get
            {
                yield return "Singularity.ORM";
                yield return "Singularity.ORM.SQL";
                yield return "Singularity.ORM.Validation";
                yield return "Singularity.ORM.Conditions";
            }
        }

        public EntityBuilder(Entity entity)
        {
            this.entity = entity;
            this.sb = new StringBuilder();
        }

        public void Build()
        {

            addHeader();
            addUsings();

            sb.AppendFormat("namespace {0}\r\n", this.entity.Namespace);
            sb.AppendLine(" {");
            addEnumerators();

            sb.AppendLine("   /// <summary>");
            sb.AppendFormat("   /// Entity  object {0}.\r\n", (object)this.entity.Name);
            sb.AppendLine("   /// </summary>");
            sb.AppendFormat("   [System.CodeDom.Compiler.GeneratedCode(\"Singularity.CodeGenerator\", \"{0}\")]\r\n", this.version);
            sb.AppendFormat("   public partial class {0} : EntityProvider, INotifyPropertyChanged, IBaseRecord\r\n",
                (object)this.entity.Name);
            sb.AppendLine("   {");
            sb.AppendFormat("    internal static readonly string tableName = \"{0}\";\r\n\r\n", this.entity.TableName);
            sb.AppendLine();
            sb.AppendLine("   private int id;");
            foreach (Field field in this.entity.Fields)
            {
                sb.AppendFormat("   private {0} {1};\r\n", field.Type, field.Name.ToLower());
            }
            sb.AppendLine();

            addPrimaryKey();
            addFields();
            sb.AppendLine();
            addDelegates();
            sb.AppendLine();

            sb.AppendLine("     public event PropertyChangedEventHandler PropertyChanged;");
            sb.AppendLine();
            sb.AppendLine("     private void NotifyPropertyChanged([CallerMemberName] String propertyName = \"\")");
            sb.AppendLine("     {   ");
            sb.AppendLine("        if (PropertyChanged != null)  ");
            sb.AppendLine("        { ");
            sb.AppendLine("            PropertyChanged(this, new DbPropertyChangedEventArgs(propertyName, this)); ");
            sb.AppendLine();
            addDelegatesHandlers();
            sb.AppendLine();
            sb.AppendLine("        }");
            sb.AppendLine("     }");
            sb.AppendLine("   }");
            sb.AppendLine();
            sb.AppendLine();

            foreach (Key key in this.entity.Keys)
            {
                addEntityKey(key);
            }
            addEntityTable();
        }

        private void addHeader()
        {
            sb.AppendLine();
            sb.AppendLine("//----------------------------------------------------------------------------------");
            sb.AppendLine("// <autogenerated>");
            sb.AppendLine("//\t\tThis code was generated by a tool.");
            sb.AppendLine("//\t\tChanges to this file may cause incorrect behaviour and will be lost ");
            sb.AppendLine("//\t\tif the code is regenerated.");
            sb.AppendLine("// </autogenerated>");
            sb.AppendLine("//----------------------------------------------------------------------------------");
            //sb.AppendLine();;
            sb.AppendLine();
        }

        private void addUsings()
        {
            sb.AppendLine("using System;");
            sb.AppendLine("using System.ComponentModel;");
            sb.AppendLine("using System.Runtime.CompilerServices;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("using System.Linq;");
            sb.AppendLine("using System.Text;");

            usings.ToList().ForEach(delegate(string str)
            {
                sb.AppendFormat("using {0};\r\n", (object)str);
            });
            addCustomUsings();
            sb.AppendLine();
            sb.AppendLine();
            sb.AppendLine();
        }

        private void addCustomUsings()
        {
            if (this.entity.Usings != null && this.entity.Usings.Length > 0)
            {
                this.entity.Usings.ToList().ForEach(delegate(string str)
                {
                    sb.AppendFormat("using {0};\r\n", (object)str);
                });
            }
        }

        private void addEnumerators()
        {
            if (this.entity.Enums != null)
            {
                this.entity.Enums.ToList().ForEach(delegate(Enumerator enumerator)
                {
                    sb.AppendFormat("   public enum {0} \r\n ", enumerator.Name);
                    sb.AppendLine("  {");
                    int i = 1;
                    foreach (string item in enumerator.Items)
                    {
                        sb.AppendFormat("        {0} = {1}, \r\n", item, i);
                        i++;
                    }
                    sb.AppendLine("   }");
                    sb.AppendLine();
                });
                sb.AppendLine();
            }
        }

        private void addPrimaryKey()
        {
            Field primary_key = new Field()
            {
                Name = "Id",
                Description = "Primary unique key for current table",
                Type = "int",
                entity = this.entity
            };
            addFieldHeader(primary_key);
            addField(primary_key, false);
        }

        private void addFields()
        {

            this.entity.Fields.ToList().ForEach(delegate(Field field)
            {
                addFieldHeader(field);
                if (field.Mendatory)
                    sb.AppendLine("   [Mendatory]");
                if (field.Length > 0
                    && (field.Type == "string" || field.Type == "String"))
                    sb.AppendFormat("   [TextMaxLength({0})]\r\n", field.Length);
                else if
                    (field.Length > 0 && (field.Type != "string" || field.Type != "String"))
                    throw new InvalidOperationException
                      ("Field {0} is not a string type and due to that it cannot be set a length value" +
                      field.Name);

                Key _key = this.entity.Keys.Where
                         (key => key.Column == field.Name).FirstOrDefault();
                if (_key != null && _key.Type == KeyType.ForeignKey)
                    sb.AppendFormat("   [ForeignKey(\"{0}\")]\r\n", _key.Table);
                if (_key != null && _key.Type == KeyType.PrimaryKey)
                    sb.AppendLine("   [PrimaryKey]");
                addField(field, _key != null);

            });
        }

        private void addDelegatesHandlers()
        {
            this.entity.Fields.ToList().ForEach(delegate(Field field)
            {
                sb.AppendFormat("            if (propertyName.Equals(\"{0}\"))\r\n", field.Name);
                sb.AppendLine("            {");
                sb.AppendFormat("                \tif ({1}.{0}Changed != null)\r\n", field.Name, (object)this.entity.Name);
                sb.AppendFormat("                \t\t  {1}.{0}Changed(({1})this);\r\n", field.Name, (object)this.entity.Name);
                sb.AppendLine("            }");
            });
        }

        private void addDelegates()
        {
            this.entity.Fields.ToList().ForEach(delegate(Field field)
            {
                sb.AppendFormat("   internal static EntityDelegate<{0}> {1}Changed;\r\n", (object)this.entity.Name, field.Name);
                sb.AppendFormat("   public static void {0}ChangedHandler(EntityDelegate<{1}> value) {{\r\n", field.Name, (object)this.entity.Name);                
                sb.AppendFormat("       \t {0}Changed = (EntityDelegate<{1}>)Delegate.Combine({0}Changed, value);\r\n", field.Name, (object)this.entity.Name);
                sb.AppendLine("   }");
                sb.AppendLine();
            });
        }

        private void addFieldHeader(Field field)
        {
            sb.AppendLine("   /// <summary>");
            sb.AppendFormat("   /// {0} \r\n", field.Description);
            sb.AppendLine("   /// </summary>");
        }

        private void addField(Field field, bool isForeignKey)
        {
            sb.AppendFormat("   public {0} {1}\r\n", field.Type, field.Name);
            sb.AppendLine("   {");
            sb.AppendLine("      get  ");
            sb.AppendLine("      {");
            if (isForeignKey)
            {
                var _name = field.Name.ToLower();
                sb.AppendFormat("           if ({0} != null)\r\n", _name);
                sb.AppendLine("           {");
                sb.AppendFormat("           if ({0}.Transaction == null)\r\n", _name);
                sb.AppendFormat("               {0}.Transaction = this.Transaction;\r\n", _name);
                sb.AppendLine("           }");
            }
            sb.AppendFormat("           return {0};\r\n ", field.Name.ToLower());
            sb.AppendLine("     }");
            sb.AppendLine("      set ");
            sb.AppendLine("      {  ");
            sb.AppendFormat("           {0} = value;\r\n", field.Name.ToLower());
            sb.AppendLine("           NotifyPropertyChanged();");
            sb.AppendLine("      }");
            sb.AppendLine("   }");
            sb.AppendLine();
        }


        private void addEntityKey(Key key)
        {
            Field _field = this.entity.Fields.Where(f => f.Name == key.Column).FirstOrDefault();
            if (_field != null)
            {
                sb.AppendFormat("    public partial class {0}\r\n", _field.Type);
                sb.AppendLine("     { ");
                sb.AppendLine("    /// <summary>");
                if (_field.Unique)
                {
                    sb.AppendFormat("    /// Referential entity object by foreign key {0}.\r\n", (object)this.entity.Name);
                    sb.AppendLine("    /// </summary>");
                    sb.AppendFormat("      public {0} {1}\r\n", this.entity.Name, key.Children);
                    sb.AppendLine("       { ");
                    sb.AppendLine("            get ");
                    sb.AppendLine("            { ");
                    sb.AppendLine("                 ISqlTransaction trans = (ISqlTransaction)this.Transaction;");
                    sb.AppendLine("                 if (trans == null)");
                    sb.AppendLine("                 {");
                    sb.AppendLine("                     return null;");
                    sb.AppendLine("                 }");
                    sb.AppendFormat("                   return Tables.{0}Table.GetInstance(trans)[this.Id];\r\n", this.entity.Name);

                    sb.AppendLine("            }");
                    sb.AppendLine("       } ");
                }
                else
                {
                    sb.AppendFormat("    /// Referential entities collection by foreign key {0}.\r\n", (object)this.entity.Name);
                    sb.AppendLine("    /// </summary>");
                    sb.AppendFormat("      public IEnumerable<{0}> {1}\r\n", this.entity.Name, key.Children);
                    sb.AppendLine("       { ");
                    sb.AppendLine("            get ");
                    sb.AppendLine("            { ");
                    sb.AppendLine("                 ISqlTransaction trans = (ISqlTransaction)this.Transaction;");
                    sb.AppendLine("                 if (trans == null)");
                    sb.AppendLine("                 {");
                    sb.AppendLine("                     return null;");
                    sb.AppendLine("                 }");
                    sb.AppendFormat("                 return Tables.{0}Table.GetInstance(trans).GetRows\r\n", this.entity.Name);
                    sb.AppendFormat("                             (new RecordCondition.Equal(\"{0}.Id\", this.Id));\r\n", key.Column);
                    sb.AppendLine("            }");
                    sb.AppendLine("       } ");
                }
                sb.AppendLine("    } ");

            }
        }

        private void addEntityTable()
        {
            sb.AppendLine("    public partial class Tables");
            sb.AppendLine("     { ");
            sb.AppendLine();
            sb.AppendLine("    /// <summary>");
            sb.AppendFormat("    /// Table class for entity {0}.\r\n", (object)this.entity.Name);
            sb.AppendLine("    /// </summary>");
            sb.AppendFormat("      public sealed class {0}Table : EntityTable//<{0}>\r\n", this.entity.Name);
            sb.AppendLine("      {");
            sb.AppendLine("      /// <summary>");
            sb.AppendLine("      /// ..(ctor)");
            sb.AppendLine("      /// </summary>");
            sb.AppendLine("      /// <param name=\"transaction\">Transaction</param>");
            sb.AppendFormat("      public {0}Table(ISqlTransaction transaction)\r\n", this.entity.Name);
            sb.AppendLine("           : base(transaction)  ");
            sb.AppendLine("       { ");
            sb.AppendLine();
            sb.AppendLine("       } ");
            sb.AppendLine();
            sb.AppendLine("     /// <summary>");
            sb.AppendLine("     /// Indexer responsible for returning particular entity object instance ");
            sb.AppendLine("     /// using simple condition.");
            sb.AppendLine("     /// </summary>");
            sb.AppendLine("     /// <param name=\"field\">field name which is used as a condition");
            sb.AppendLine("     /// <param name=\"value\">field value used as a condition");
            sb.AppendFormat("     /// <seealso cref=\"{0}\"/>\r\n", (object)this.entity.Name);
            sb.AppendLine("      [System.Runtime.CompilerServices.IndexerName(\"FindBy\")]");
            sb.AppendFormat("      public {0} this[string field, object value]\r\n", this.entity.Name);
            sb.AppendLine("       { ");
            sb.AppendLine("            get ");
            sb.AppendLine("            { ");
            sb.AppendFormat("              return base.FindBy<{0}>(field, value);\r\n", this.entity.Name);
            sb.AppendLine("            }");
            sb.AppendLine("       } ");
            sb.AppendLine();
            sb.AppendLine();
            sb.AppendLine("     /// <summary>");
            sb.AppendLine("     /// Indexer responsible for returning particular entity object instance ");
            sb.AppendLine("     /// using unique ID field.");
            sb.AppendLine("     /// </summary>");
            sb.AppendLine("     /// <param name=\"id\">ID key unique value");
            sb.AppendFormat("    /// <seealso cref=\"{0}\"/>\r\n", (object)this.entity.Name);
            sb.AppendLine("      [System.Runtime.CompilerServices.IndexerName(\"FindBy\")]");
            sb.AppendFormat("      public {0} this[int id]\r\n", this.entity.Name);
            sb.AppendLine("       {    ");
            sb.AppendLine("            get ");
            sb.AppendLine("            {  ");
            sb.AppendFormat("              return base.FindByID<{0}>(id);\r\n", this.entity.Name);
            sb.AppendLine("            }");
            sb.AppendLine("       }");
            sb.AppendLine();
            sb.AppendLine();
            sb.AppendLine();
            sb.AppendLine("     /// <summary>");
            sb.AppendLine("     /// Method returning first instance of particular entity object");
            sb.AppendLine("     /// using multiple condition.");
            sb.AppendLine("     /// </summary>");
            sb.AppendLine("     /// <param name=\"condition\">condition");
            sb.AppendLine("     /// <seealso cref=\"typeof(SQLCondition)\"/>");
            sb.AppendFormat("     /// <seealso cref=\"{0}\"/>\r\n", (object)this.entity.Name);
            sb.AppendFormat("      public {0} GetFirst(SQLCondition condition)\r\n", this.entity.Name);
            sb.AppendLine("       {    ");
            sb.AppendFormat("            return base.GetFirst<{0}>(condition); \r\n", this.entity.Name);
            sb.AppendLine();
            sb.AppendLine("       }");
            sb.AppendLine();
            sb.AppendLine("     /// <summary>");
            sb.AppendLine("     /// Method returning last instance of particular entity object");
            sb.AppendLine("     /// using multiple condition.");
            sb.AppendLine("     /// </summary>");
            sb.AppendLine("     /// <param name=\"condition\">condition");
            sb.AppendLine("     /// <seealso cref=\"typeof(SQLCondition)\"/>");
            sb.AppendFormat("     /// <seealso cref=\"{0}\"/>\r\n", (object)this.entity.Name);
            sb.AppendFormat("      public {0} GetLast(SQLCondition condition)\r\n", this.entity.Name);
            sb.AppendLine("       {     ");
            sb.AppendFormat("            return base.GetLast<{0}>(condition);\r\n", this.entity.Name);
            sb.AppendLine("       }");
            sb.AppendLine();
            sb.AppendLine("     /// <summary>");
            sb.AppendLine("     /// Method returning collection of entities");
            sb.AppendLine("     /// using multiple condition within limiting of result.");
            sb.AppendLine("     /// </summary>");
            sb.AppendLine("     /// <param name=\"condition\">condition");
            sb.AppendLine("     /// <seealso cref=\"typeof(SQLCondition)\"/>");
            sb.AppendFormat("     /// <seealso cref=\"{0}\"/>\r\n", (object)this.entity.Name);
            sb.AppendFormat("      public IEnumerable<{0}> GetLimited(SQLCondition condition, int limit)\r\n", this.entity.Name);
            sb.AppendLine("        {      ");
            sb.AppendFormat("            return base.GetLimited<{0}>(condition, limit);\r\n", this.entity.Name);
            sb.AppendLine("        }");
            sb.AppendLine();
            sb.AppendLine("     /// <summary>");
            sb.AppendLine("     /// Method returning collection of entities");
            sb.AppendLine("     /// using multiple condition.");
            sb.AppendLine("     /// </summary>");
            sb.AppendLine("     /// <param name=\"condition\">condition");
            sb.AppendLine("     /// <seealso cref=\"typeof(SQLCondition)\"/>");
            sb.AppendFormat("     /// <seealso cref=\"{0}\"/>\r\n", (object)this.entity.Name);
            sb.AppendFormat("      public IEnumerable<{0}> GetRows(SQLCondition condition)\r\n", this.entity.Name);
            sb.AppendLine("       {      ");
            sb.AppendFormat("       return base.GetRows<{0}>(condition);\r\n", this.entity.Name);
            sb.AppendLine("       }");
            sb.AppendLine();
            sb.AppendLine("     /// <summary>");
            sb.AppendLine("     /// Method adding an entire new instance of entity object");
            sb.AppendLine("     /// to current transaction.");
            sb.AppendLine("     /// </summary>");
            sb.AppendFormat("     /// <param name=\"row\">{0} row\r\n", (object)this.entity.Name);
            sb.AppendFormat("     /// <seealso cref=\"{0}\"/>\r\n", (object)this.entity.Name);
            sb.AppendFormat("      public void Add({0} row)\r\n", this.entity.Name);
            sb.AppendLine("       {       ");
            sb.AppendFormat("          base.Add<{0}>(row);\r\n", this.entity.Name);
            sb.AppendLine("       }");
            sb.AppendLine();
            sb.AppendLine("      /// <summary>");
            sb.AppendLine("      /// Add table to current transaction");
            sb.AppendLine("      /// </summary>");
            sb.AppendLine("      /// <param name=\"transaction\">Transaction</param>");
            sb.AppendFormat("      public static {0}Table GetInstance(ISqlTransaction transaction)\r\n", this.entity.Name);
            sb.AppendLine("       {        ");
            sb.AppendLine("          if (transaction == null) return null; ");
            sb.AppendFormat("             return ({0}Table)transaction.Tables[typeof({0}Table)];\r\n", this.entity.Name);
            sb.AppendLine("       }");
            sb.AppendLine();
            sb.AppendLine("     }");
            sb.AppendLine("   }");
            sb.AppendLine();
            if (!String.IsNullOrEmpty(this.entity.Repository))
                addRepository();
            sb.AppendLine("}");
        }

        private void addRepository()
        {
            var Repository = (object)this.entity.Repository;
            sb.AppendLine();
            sb.AppendLine("    /// <summary>");
            sb.AppendFormat("    /// Table class for Repository {0}.\r\n", Repository);
            sb.AppendLine("    /// </summary>");
            sb.AppendFormat("    public partial class {0}Repository : EntityRepository", Repository);
            sb.AppendLine("     { ");
            sb.AppendLine();
            sb.AppendLine("      /// <summary>");
            sb.AppendFormat("      /// Returns handle for a table collection {0}.\r\n", (object)this.entity.Name);
            sb.AppendLine("      /// </summary>");
            sb.AppendFormat("      public Tables.{0}Table {1}\r\n", this.entity.Name, this.entity.TableName);
            sb.AppendLine("       {        ");
            sb.AppendLine("            get ");
            sb.AppendLine("            { ");
            sb.AppendFormat("               return Tables.{0}Table.GetInstance(base.Transaction);\r\n ", this.entity.Name);
            sb.AppendLine("           }");
            sb.AppendLine("       }");
            sb.AppendLine("    }");
        }
    }
}
